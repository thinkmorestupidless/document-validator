akka.actor.allow-java-serialization = true

akka {
  actor {
    provider = cluster

    serialization-bindings {
      "worker.CborSerializable" = jackson-cbor
    }
  }

  loglevel = DEBUG

  # use Cassandra to store both snapshots and the events of the persistent actors
  persistence {
    journal {
      plugin = "jdbc-journal"
      // Enable the line below to automatically start the journal when the actorsystem is started
      // auto-start-journals = ["jdbc-journal"]
    }
    snapshot-store {
      plugin = "jdbc-snapshot-store"
      // Enable the line below to automatically start the snapshot-store when the actorsystem is started
      // auto-start-snapshot-stores = ["jdbc-snapshot-store"]
    }
  }

  # Run the pubsub mediator on all nodes, without any code starting it up
  extensions = ["akka.cluster.pubsub.DistributedPubSub"]
}

jdbc-journal {
  slick = ${slick}
}

# the akka-persistence-snapshot-store in use
jdbc-snapshot-store {
  slick = ${slick}
}

# the akka-persistence-query provider in use
jdbc-read-journal {
  slick = ${slick}
}

slick {
  profile = "slick.jdbc.PostgresProfile$"
  db {
    url = "jdbc:postgresql://localhost:5432/document_validator?reWriteBatchedInserts=true"
    url = ${?POSTGRES_URL}
    user = "document_validator"
    user = ${?POSTGRES_USER}
    password = "document_validator"
    password = ${?POSTGRES_PASSWORD}
    driver = "org.postgresql.Driver"
    numThreads = 5
    maxConnections = 5
    minConnections = 1
  }
}

# Configuration related to the app is in its own namespace
distributed-workers {
  # If a workload hasn't finished in this long it
  # is considered failed and is retried
  work-timeout = 10s

  # Timeout for worker waiting for ack from work manager
  work-ack-timeout = 5s
}
